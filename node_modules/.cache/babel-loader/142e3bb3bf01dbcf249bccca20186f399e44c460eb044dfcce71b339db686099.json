{"ast":null,"code":"var _jsxFileName = \"/Users/jacob/Desktop/ReactJS Project/FixerExchangeRate/erate/src/Components/ConvertRates.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport { FormHelperText } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ConvertRates({\n  Item,\n  symbols,\n  fromCurrency,\n  toCurrency,\n  amount,\n  setAmount,\n  setConverted,\n  setDate,\n  setBaseSymbol,\n  setLatestRate\n}) {\n  _s();\n  useEffect(() => {\n    if (!amount || !fromCurrency || !toCurrency || !symbols) return;\n    const fetchRates = async () => {\n      try {\n        const res = await axios.get(\"https://data.fixer.io/api/latest\", {\n          params: {\n            access_key: \"dc8091b34903d6483857ed61900c5f3a\",\n            symbols: `${fromCurrency},${toCurrency}`\n          }\n        });\n        const rates = res.data.rates;\n        const fromRate = rates[fromCurrency];\n        const toRate = rates[toCurrency];\n        const result = toRate / fromRate * amount;\n        setConverted(result);\n        setDate(res.data.date);\n        setBaseSymbol(res.data.base);\n        setLatestRate(rates[fromCurrency]);\n      } catch (error) {\n        console.error(\"Conversion error:\", error.message);\n      }\n    };\n    fetchRates();\n  }, [amount, fromCurrency, toCurrency, symbols, setConverted, setDate, setBaseSymbol, setLatestRate]);\n  return /*#__PURE__*/_jsxDEV(Item, {\n    sx: {\n      p: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"outlined\",\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"outlined-adornment-amount\",\n        sx: {\n          color: \"rgba(255, 255, 255, 0.7)\"\n        },\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n        id: \"outlined-adornment-amount\",\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(Number(e.target.value)),\n        label: \"Amount\",\n        sx: {\n          // Remove background\n          backgroundColor: \"transparent\",\n          // Text color\n          color: \"white\",\n          // Color of the input text specifically\n          input: {\n            color: \"white\"\n          },\n          // Border styling\n          \".MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"rgba(255, 255, 255, 0.5)\"\n          },\n          \"&:hover .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"white\"\n          },\n          \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n            borderColor: \"#90caf9\"\n          },\n          // Optional: caret color\n          caretColor: \"white\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n        sx: {\n          color: \"rgba(255, 255, 255, 0.6)\"\n        },\n        children: \"Please enter the amount to convert.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(ConvertRates, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ConvertRates;\nexport default ConvertRates;\nvar _c;\n$RefreshReg$(_c, \"ConvertRates\");","map":{"version":3,"names":["React","useEffect","axios","InputLabel","FormControl","OutlinedInput","FormHelperText","jsxDEV","_jsxDEV","ConvertRates","Item","symbols","fromCurrency","toCurrency","amount","setAmount","setConverted","setDate","setBaseSymbol","setLatestRate","_s","fetchRates","res","get","params","access_key","rates","data","fromRate","toRate","result","date","base","error","console","message","sx","p","children","variant","htmlFor","color","fileName","_jsxFileName","lineNumber","columnNumber","id","type","value","onChange","e","Number","target","label","backgroundColor","input","borderColor","caretColor","_c","$RefreshReg$"],"sources":["/Users/jacob/Desktop/ReactJS Project/FixerExchangeRate/erate/src/Components/ConvertRates.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport { FormHelperText } from \"@mui/material\";\n\n\nfunction ConvertRates({\n  Item,\n  symbols,\n  fromCurrency,\n  toCurrency,\n  amount,\n  setAmount,\n  setConverted,\n  setDate,\n  setBaseSymbol,\n  setLatestRate\n}) {\n  useEffect(() => {\n    if (!amount || !fromCurrency || !toCurrency || !symbols ) return;\n\n    const fetchRates = async () => {\n      try {\n        const res = await axios.get(\"https://data.fixer.io/api/latest\", {\n          params: {\n            access_key: \"dc8091b34903d6483857ed61900c5f3a\",\n            symbols: `${fromCurrency},${toCurrency}`,\n          },\n        });\n\n        const rates = res.data.rates;\n        const fromRate = rates[fromCurrency];\n        const toRate = rates[toCurrency];\n        const result = (toRate / fromRate) * amount;\n        setConverted(result);\n        setDate(res.data.date);\n        setBaseSymbol(res.data.base);\n        setLatestRate(rates[fromCurrency]);\n      } catch (error) {\n        console.error(\"Conversion error:\", error.message);\n      }\n    };\n\n    \n    fetchRates();\n  }, [amount, fromCurrency, toCurrency, symbols, setConverted, setDate,setBaseSymbol,setLatestRate]);\n\n  return (\n    <Item sx={{ p: 2,  }}>\n      <FormControl variant=\"outlined\">\n        <InputLabel\n          htmlFor=\"outlined-adornment-amount\"\n          sx={{ color: \"rgba(255, 255, 255, 0.7)\" }}\n        >\n          Amount\n        </InputLabel>\n        <OutlinedInput\n          id=\"outlined-adornment-amount\"\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(Number(e.target.value))}\n          label=\"Amount\"\n          sx={{\n            // Remove background\n            backgroundColor: \"transparent\",\n\n            // Text color\n            color: \"white\",\n\n            // Color of the input text specifically\n            input: {\n              color: \"white\",\n            },\n\n            // Border styling\n            \".MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"rgba(255, 255, 255, 0.5)\",\n            },\n            \"&:hover .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"white\",\n            },\n            \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n              borderColor: \"#90caf9\",\n            },\n\n            // Optional: caret color\n            caretColor: \"white\",\n          }}\n        />\n         <FormHelperText sx={{ color: \"rgba(255, 255, 255, 0.6)\" }}>\n    Please enter the amount to convert.\n  </FormHelperText>\n      </FormControl>\n    </Item>\n  );\n}\n\nexport default ConvertRates;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}